---
layout: post
title:  ' Use Reflection of .NET Wisely '
categories: [.net, c#, reflection, appdomain, assembly]
---
Reflection is a technique that enable you access the information of an assembly (DLL or EXE) and then execute some method in the assembly `at runtime`. 

Create a `library class`:

```
//output: "C:\Projects\reflection\readfile.dll"
namespace reflectionTest
{
    public class ReadFile
    {
        public string readFileContents()
        {
            //suppose we read a file "file.txt".
            using (StreamReader sr = new StreamReader(@"file.txt", Encoding.UTF8))
            {
                string text = sr.ReadToEnd();
                return text;
            }
        }   
    }
}
```

Create a console application:

```
//output: "C:\RunFolder\Debug\runReflection.cs"
Assembly asm = Assembly.LoadFrom(@"C:\Projects\reflection\readfile.dll");

//the parameter is in the format of "namespace.classname".
Type t = asm.GetType("reflectionTest.ReadFile");

MethodInfo m = t.GetMethod("readFileContents");

//create an instance of class ReadFile
//if "readFileContents" is a static method, no need to create an instance/object.
object o = Activator.CreateInstance(t, null);

//invoke the method
string res = (string)m.Invoke(o, null);
return res;
```         

However, when it is executed, you will get an error saying "cannot find file.txt". Why? This is because when you are running "runReflection", its working directory is "C:\RunFolder\Debug". Then when you load and run "C:\Projects\reflection\readfile.dll", the working directory is still "C:\RunFolder\Debug". SO when `new StreamReader(@"file.txt", Encoding.UTF8)` is executed, it will trying to find "file.txt" under current working directory which does not have such a file exsiting.

How to resolve this issue?

```
Directory.SetCurrentDirectory(Path.GetDirectoryName(@"C:\Projects\reflection\readfile.dll"));
```

Add the above line of code anywhere before invoking the method. IT will set the working directory to where "readfile.dll" resides.


```
//output: "C:\RunFolder\Debug\runReflection.cs"
Assembly asm = Assembly.LoadFrom(@"C:\Projects\reflection\readfile.dll");

//the parameter is in the format of "namespace.classname".
Type t = asm.GetType("reflectionTest.ReadFile");

MethodInfo m = t.GetMethod("readFileContents");

//create an instance of class ReadFile
//if "readFileContents" is a static method, no need to create an instance/object.
object o = Activator.CreateInstance(t, null);

//change current working directory
Directory.SetCurrentDirectory(Path.GetDirectoryName(@"C:\Projects\reflection\readfile.dll"));
//invoke the method
string res = (string)m.Invoke(o, null);
return res;
```      

Now it can run smoothly.

BUT, if your program is using "app.config" through `ConfigurationManager`.
